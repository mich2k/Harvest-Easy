// src/createHydration.tsx
import React4 from "react";

// src/createHydrationProvider.tsx
import React2 from "react";

// src/useComponentHydrated.tsx
import React from "react";
function useComponentHydrated() {
  const [hydrated, setHydrated] = React.useState(false);
  React.useEffect(() => {
    setHydrated(true);
  }, []);
  return hydrated;
}

// src/createHydrationProvider.tsx
function createHydrationProvider(HydrationContext2) {
  return function HydrationProvider2({ children }) {
    const hydrated = useComponentHydrated();
    return /* @__PURE__ */ React2.createElement(HydrationContext2.Provider, {
      value: hydrated
    }, children);
  };
}

// src/createComponents.tsx
import React3 from "react";
function createComponents(useHydrated2) {
  const Server2 = ({ children }) => {
    const hydrated = useHydrated2();
    return !hydrated ? /* @__PURE__ */ React3.createElement(React3.Fragment, null, children) : null;
  };
  const Client2 = ({ children }) => {
    const hydrated = useHydrated2();
    return hydrated ? /* @__PURE__ */ React3.createElement(React3.Fragment, null, children) : null;
  };
  return {
    Server: Server2,
    Client: Client2
  };
}

// src/createHydration.tsx
function createHydration() {
  const HydrationContext2 = React4.createContext(false);
  const HydrationProvider2 = createHydrationProvider(HydrationContext2);
  const useHydrated2 = () => {
    return React4.useContext(HydrationContext2);
  };
  const { Server: Server2, Client: Client2 } = createComponents(useHydrated2);
  return {
    HydrationContext: HydrationContext2,
    HydrationProvider: HydrationProvider2,
    useHydrated: useHydrated2,
    Server: Server2,
    Client: Client2
  };
}

// src/index.ts
var { HydrationContext, HydrationProvider, useHydrated, Server, Client } = createHydration();
export {
  Client,
  HydrationContext,
  HydrationProvider,
  Server,
  createHydration,
  useComponentHydrated,
  useHydrated
};
//# sourceMappingURL=index.js.map