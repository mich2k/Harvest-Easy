"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/createHydration.tsx
var _react = require('react'); var _react2 = _interopRequireDefault(_react);

// src/createHydrationProvider.tsx


// src/useComponentHydrated.tsx

function useComponentHydrated() {
  const [hydrated, setHydrated] = _react2.default.useState(false);
  _react2.default.useEffect(() => {
    setHydrated(true);
  }, []);
  return hydrated;
}

// src/createHydrationProvider.tsx
function createHydrationProvider(HydrationContext2) {
  return function HydrationProvider2({ children }) {
    const hydrated = useComponentHydrated();
    return /* @__PURE__ */ _react2.default.createElement(HydrationContext2.Provider, {
      value: hydrated
    }, children);
  };
}

// src/createComponents.tsx

function createComponents(useHydrated2) {
  const Server2 = ({ children }) => {
    const hydrated = useHydrated2();
    return !hydrated ? /* @__PURE__ */ _react2.default.createElement(_react2.default.Fragment, null, children) : null;
  };
  const Client2 = ({ children }) => {
    const hydrated = useHydrated2();
    return hydrated ? /* @__PURE__ */ _react2.default.createElement(_react2.default.Fragment, null, children) : null;
  };
  return {
    Server: Server2,
    Client: Client2
  };
}

// src/createHydration.tsx
function createHydration() {
  const HydrationContext2 = _react2.default.createContext(false);
  const HydrationProvider2 = createHydrationProvider(HydrationContext2);
  const useHydrated2 = () => {
    return _react2.default.useContext(HydrationContext2);
  };
  const { Server: Server2, Client: Client2 } = createComponents(useHydrated2);
  return {
    HydrationContext: HydrationContext2,
    HydrationProvider: HydrationProvider2,
    useHydrated: useHydrated2,
    Server: Server2,
    Client: Client2
  };
}

// src/index.ts
var { HydrationContext, HydrationProvider, useHydrated, Server, Client } = createHydration();








exports.Client = Client; exports.HydrationContext = HydrationContext; exports.HydrationProvider = HydrationProvider; exports.Server = Server; exports.createHydration = createHydration; exports.useComponentHydrated = useComponentHydrated; exports.useHydrated = useHydrated;
//# sourceMappingURL=index.cjs.map