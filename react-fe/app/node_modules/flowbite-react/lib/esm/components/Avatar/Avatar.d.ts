import type { ComponentProps, FC, PropsWithChildren, ReactElement } from 'react';
import { DeepPartial } from '..';
import type { FlowbiteColors, FlowbitePositions, FlowbiteSizes } from '../Flowbite/FlowbiteTheme';
export interface FlowbiteAvatarTheme {
    root: FlowbiteAvatarRootTheme;
    img: FlowbiteAvatarImageTheme;
    status: FlowbiteAvatarStatusTheme;
    initials: FlowbiteAvatarInitialsTheme;
}
export interface FlowbiteAvatarRootTheme {
    base: string;
    bordered: string;
    color: AvatarColors;
    rounded: string;
    size: AvatarSizes;
    stacked: string;
    statusPosition: FlowbitePositions;
}
export interface FlowbiteAvatarImageTheme {
    off: string;
    on: string;
    placeholder: string;
}
export interface FlowbiteAvatarStatusTheme {
    away: string;
    base: string;
    busy: string;
    offline: string;
    online: string;
}
export interface FlowbiteAvatarInitialsTheme {
    base: string;
    text: string;
}
export interface AvatarColors extends Pick<FlowbiteColors, 'failure' | 'gray' | 'info' | 'pink' | 'purple' | 'success' | 'warning'> {
    [key: string]: string;
}
export interface AvatarSizes extends Pick<FlowbiteSizes, 'xs' | 'sm' | 'md' | 'lg' | 'xl'> {
    [key: string]: string;
}
export interface AvatarImageProps {
    alt?: string;
    className: string;
    'data-testid': string;
}
export interface AvatarProps extends PropsWithChildren<Omit<ComponentProps<'div'>, 'color'>> {
    alt?: string;
    bordered?: boolean;
    img?: string | ((props: AvatarImageProps) => ReactElement);
    color?: keyof AvatarColors;
    rounded?: boolean;
    size?: keyof AvatarSizes;
    stacked?: boolean;
    status?: 'away' | 'busy' | 'offline' | 'online';
    statusPosition?: keyof FlowbitePositions;
    placeholderInitials?: string;
    theme?: DeepPartial<FlowbiteAvatarTheme>;
}
export declare const Avatar: FC<AvatarProps> & {
    Group: FC<import("./AvatarGroup").AvatarGroupProps>;
    Counter: FC<import("./AvatarGroupCounter").AvatarGroupCounterProps>;
};
